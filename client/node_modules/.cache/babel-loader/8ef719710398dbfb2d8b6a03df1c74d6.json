{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects2\\\\convertfileapp\\\\client\\\\src\\\\encoder\\\\Encoder.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport toastr from 'toastr';\nimport \"./Encoder.scss\";\nimport Progress from '../Progress';\nimport Cookie from 'js-cookie';\nimport socketIOClient from 'socket.io-client';\n\nclass Encoder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      file: this.props.file,\n      encoded_file: '',\n      convert_ext: this.props.convert_ext,\n      progress: 0,\n      eta: ''\n    };\n\n    this.componentDidMount = () => {\n      const {\n        location\n      } = this.props;\n      this.socket = socketIOClient('ws://127.0.0.1:3000');\n      this.socket.emit('encode', {\n        file: this.state.file,\n        user: Cookie('_uid'),\n        convert_ext: this.state.convert_ext\n      });\n      this.socket.on('progress', data => {\n        this.setState({\n          progress: data.percentage,\n          eta: data.eta\n        });\n      });\n      this.socket.on('complete', data => {\n        this.setState({\n          encoded_file: data.encoded_file\n        });\n        toastr.success('Encoding complete');\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      this.socket.disconnect();\n      this.props.newEncode();\n    };\n  }\n\n  render() {\n    const {\n      file,\n      eta,\n      progress,\n      encoded_file\n    } = this.state;\n    const {\n      newEncode\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"encoder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, file.substring(file.indexOf('_') + 1), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"ETA : \", eta.trim().length ? eta : 'calculating ... ')), /*#__PURE__*/React.createElement(Progress, {\n      title: \"\",\n      progress: progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), encoded_file ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: '/encoded/' + Cookie('_uid') + '/' + encoded_file,\n      download: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 29\n      }\n    }, \"Download\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: newEncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, \"New Upload\")) : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: newEncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, \"Cancel Encoding\"));\n  }\n\n}\n\nexport default withRouter(Encoder);","map":{"version":3,"sources":["C:/JavascriptProjects2/convertfileapp/client/src/encoder/Encoder.js"],"names":["React","Component","withRouter","toastr","Progress","Cookie","socketIOClient","Encoder","state","file","props","encoded_file","convert_ext","progress","eta","componentDidMount","location","socket","emit","user","on","data","setState","percentage","success","componentWillUnmount","disconnect","newEncode","render","substring","indexOf","trim","length"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport { withRouter } from \"react-router\";\nimport toastr from 'toastr';\nimport \"./Encoder.scss\";\nimport Progress from '../Progress';\nimport Cookie from 'js-cookie';\nimport socketIOClient from 'socket.io-client';\n\n class Encoder extends Component {\n    state = {\n            file: this.props.file,\n            encoded_file: '',\n            convert_ext: this.props.convert_ext,\n            progress: 0,\n            eta: '',\n        }\n\n\n    componentDidMount = () => {\n        const {location} = this.props;\n        this.socket = socketIOClient('ws://127.0.0.1:3000');\n\n        this.socket.emit('encode', {\n            file : this.state.file,\n            user : Cookie('_uid'),\n            convert_ext : this.state.convert_ext\n        });\n\n        this.socket.on('progress',(data) => {\n            this.setState({\n                progress : data.percentage,\n                eta : data.eta\n            });\n        });\n\n        this.socket.on('complete',(data) => {\n            this.setState({ encoded_file : data.encoded_file });\n            toastr.success('Encoding complete');\n        });\n    }\n\n    componentWillUnmount = () => {\n        this.socket.disconnect();\n        this.props.newEncode();\n    }\n\n    render(){\n        const {file,eta,progress,encoded_file} = this.state;\n        const {newEncode} = this.props;\n\n        return (\n            <div className=\"encoder\">\n                <h3>\n                    {file.substring(file.indexOf('_') + 1)} <br/>\n                    <small>\n                        ETA : {eta.trim().length ? eta : 'calculating ... ' }\n                    </small>\n                </h3>\n                <Progress title=\"\" progress={progress}/>\n\n                {encoded_file ? (\n                    <div>\n                        <a href={ '/encoded/' + Cookie('_uid') + '/' + encoded_file} download>\n                            <button>Download</button>\n                        </a>\n                        <button onClick={newEncode}>New Upload</button>\n                    </div>\n                ) : <button onClick={newEncode}>Cancel Encoding</button>}\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Encoder);"]},"metadata":{},"sourceType":"module"}