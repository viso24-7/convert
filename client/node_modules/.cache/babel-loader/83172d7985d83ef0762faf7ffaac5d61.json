{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects2\\\\convertfileapp\\\\client\\\\src\\\\uploader\\\\Uploader.js\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport { post } from 'axios';\nimport toastr from 'toastr';\nimport \"./Uploader.scss\";\nimport Progress from \"../Progress\";\nexport default class Uploader extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getFileExtension = name => {\n      return /(?:\\.([^.]+))?$/.exec(name)[1];\n    };\n\n    this.validateFile = ext => {\n      return this.state.allowed_types.includes(ext);\n    };\n\n    this.onFileChange = e => {\n      if (!e.target.files.length) {\n        return;\n      }\n\n      let file = e.target.files[0],\n          ext = this.getFileExtension(file.name);\n\n      if (this.validateFile(ext)) {\n        this.setState({\n          file: file,\n          upload_ext: ext\n        });\n      } else {\n        toastr.error('Error: Invalid file format');\n      }\n    };\n\n    this.setConversionFormat = e => {\n      if (!e.target.value.length) {\n        this.setState({\n          convert_ext: ''\n        });\n        return;\n      }\n\n      this.setState({\n        convert_ext: e.target.value\n      });\n    };\n\n    this.initFileUpload = e => {\n      this.fileInput.current.click();\n    };\n\n    this.cancelUpload = e => {\n      this.setState({\n        file: null,\n        uploading: false,\n        progress: 0,\n        upload_ext: null,\n        convert_ext: ''\n      });\n      this.fileInput.current.value = '';\n    };\n\n    this.uploadFile = e => {\n      const {\n        file,\n        convert_ext\n      } = this.state;\n\n      if (file && convert_ext) {\n        this.setState({\n          uploading: true\n        });\n        let data = new FormData();\n        data.append('file', file);\n        data.append('convert_ext', convert_ext);\n        post('/upload', data, {\n          onUploadProgress: progressEvent => {\n            let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            this.setState({\n              progress: percentCompleted\n            });\n          }\n        }).then(res => {\n          let file = res.data;\n\n          if (file.uploaded) {\n            this.props.initEncoding(file.path, convert_ext);\n          }\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        toastr.error('Error: Select a conversion format');\n      }\n    };\n\n    this.state = {\n      file: null,\n      uploading: false,\n      progress: 0,\n      upload_ext: null,\n      convert_ext: '',\n      allowed_types: ['webm', 'mkv', 'flv', 'ogg', 'avi', 'mov', 'wmv', 'mp4', 'm4v', 'm4p', 'mpeg', '3gp', '3g2']\n    };\n    this.fileInput = React.createRef();\n  }\n\n  render() {\n    const {\n      uploading,\n      file,\n      convert_ext,\n      allowed_types,\n      upload_ext,\n      progress\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uploader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, !uploading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, file ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 37\n      }\n    }, \"Upload File\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.selectFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 37\n      }\n    }, \"Select Video File\"), file && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.cancelUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 38\n      }\n    }, \"Cancel\")), file && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: convert_ext,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 37\n      }\n    }, \"Convert To\"), allowed_types.map(ext => {\n      if (ext !== upload_ext) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: ext,\n          value: ext,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 56\n          }\n        }, ext);\n      }\n    }))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      className: \"form-control-file\",\n      ref: this.fileInput,\n      onChange: this.onFileChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(Progress, {\n      title: \"Uploading, please wait\",\n      progress: progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/JavascriptProjects2/convertfileapp/client/src/uploader/Uploader.js"],"names":["React","Component","post","toastr","Progress","Uploader","constructor","props","getFileExtension","name","exec","validateFile","ext","state","allowed_types","includes","onFileChange","e","target","files","length","file","setState","upload_ext","error","setConversionFormat","value","convert_ext","initFileUpload","fileInput","current","click","cancelUpload","uploading","progress","uploadFile","data","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","then","res","uploaded","initEncoding","path","catch","err","console","log","createRef","render","selectFile","handleChange","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Component} from 'react';\nimport {post} from 'axios';\nimport toastr from 'toastr';\nimport \"./Uploader.scss\";\nimport Progress from \"../Progress\";\n\nexport default class Uploader extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: null,\n            uploading: false,\n            progress : 0,\n            upload_ext : null,\n            convert_ext : '',\n            allowed_types : [\n                'webm', 'mkv', 'flv', 'ogg',\n                'avi', 'mov' , 'wmv', 'mp4',\n                'm4v', 'm4p', 'mpeg', '3gp',\n                '3g2'\n            ]\n        };\n        this.fileInput = React.createRef();\n    }\n\n    getFileExtension = (name) => {\n        return /(?:\\.([^.]+))?$/.exec(name)[1];\n    }\n\n    validateFile = (ext) => {\n        return this.state.allowed_types.includes(ext);\n    }\n\n    onFileChange = e => {\n        if(!e.target.files.length){\n            return;\n        }\n\n        let file = e.target.files[0],\n            ext = this.getFileExtension(file.name);\n\n        if (this.validateFile(ext)) {\n            this.setState({\n                file: file,\n                upload_ext : ext\n            })\n        }else{\n            toastr.error('Error: Invalid file format')\n        }\n    }\n\n    setConversionFormat = e => {\n        if(!e.target.value.length){\n            this.setState({convert_ext : '' });\n            return;\n        }\n\n        this.setState({ convert_ext : e.target.value });\n    }\n\n    initFileUpload = e => {\n        this.fileInput.current.click();\n    }\n\n    cancelUpload  = e => {\n        this.setState({\n            file: null,\n            uploading: false,\n            progress : 0,\n            upload_ext : null,\n            convert_ext : '',\n        });\n        this.fileInput.current.value = '';\n    }\n\n    uploadFile = e => {\n        const {file,convert_ext} = this.state;\n        if(file && convert_ext){\n            this.setState({uploading: true});\n            let data = new FormData();\n            data.append('file', file);\n            data.append('convert_ext',convert_ext);\n\n            post('/upload', data, {\n                onUploadProgress: (progressEvent) => {\n                    let percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n                    this.setState({ progress : percentCompleted });\n                }\n            }).then(res => {\n                let file = res.data;\n                if(file.uploaded){\n                    this.props.initEncoding(file.path,convert_ext);\n                }\n            }).catch(err => { console.log(err);});\n        }else{\n            toastr.error('Error: Select a conversion format')\n        }\n    }\n\n    render(){\n        const {uploading,file,convert_ext,allowed_types,upload_ext,progress} = this.state;\n        return(\n            <div className=\"uploader\">\n                {!uploading ?\n                    <div>\n                        <div>\n                            {file ? <button  onClick={this.uploadFile}>Upload File</button>\n                                  : <button  onClick={this.selectFile}>Select Video File</button> }\n                            {file && <button onClick={this.cancelUpload}>Cancel</button>  }\n                        </div>\n\n                        {file &&\n                            <div>\n                                <select value={convert_ext} onChange={this.handleChange}>\n                                    <option value=\"\">Convert To</option>\n                                    {allowed_types.map((ext) => {\n                                            if(ext !== upload_ext){\n                                                return <option key={ext} value={ext}>{ext}</option>\n                                            }\n                                        })\n                                    }\n                                </select>\n                            </div>\n                        }\n\n                        <input type=\"file\" name=\"file\" className=\"form-control-file\" ref={this.fileInput} onChange={this.onFileChange}/>\n                    </div>\n                    : <Progress title=\"Uploading, please wait\" progress={progress}/>\n                }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}