{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects2\\\\convertfileapp\\\\client\\\\src\\\\encoder\\\\Encoder.js\";\nimport React, { Component } from \"react\";\nimport toastr from 'toastr';\nimport \"./Encoder.scss\";\nimport Progress from '../';\nimport Cookie from 'js-cookie';\nimport socketIOClient from 'socket.io-client';\nexport default class Encoder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      file: '',\n      encoded_file: '',\n      convert_ext: '',\n      progress: 0,\n      eta: ''\n    };\n\n    this.componentDidMount = () => {\n      this.socket = socketIOClient('ws://127.0.0.1:/3001');\n      this.socket.emit('encode', {\n        file: this.state.file,\n        user: Cookie('_uid'),\n        convert_ext: this.state.convert_ext\n      });\n      this.socket.on('progress', data => {\n        this.setState({\n          progress: data.percentage,\n          eta: data.eta\n        });\n      });\n      this.socket.on('complete', data => {\n        this.setState({\n          encoded_file: data.encoded_file\n        });\n        toastr.success('Encoding complete');\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      this.socket.disconnect();\n      this.props.newEncode();\n    };\n  }\n\n  render() {\n    let filename = this.state.file;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"encoder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, filename.substring(filename.indexOf('_') + 1), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"ETA : \", this.state.eta.trim().length ? this.state.eta : 'calculating ... ')), /*#__PURE__*/React.createElement(Progress, {\n      title: \"\",\n      progress: this.state.progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }), this.state.encoded_file ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: '/encoded/' + Cookie('_uid') + '/' + this.state.encoded_file,\n      download: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }\n    }, \"Download\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.newEncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, \"New Upload\")) : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.newEncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, \"Cancel Encoding\"));\n  }\n\n}","map":{"version":3,"sources":["C:/JavascriptProjects2/convertfileapp/client/src/encoder/Encoder.js"],"names":["React","Component","toastr","Progress","Cookie","socketIOClient","Encoder","state","file","encoded_file","convert_ext","progress","eta","componentDidMount","socket","emit","user","on","data","setState","percentage","success","componentWillUnmount","disconnect","props","newEncode","render","filename","substring","indexOf","trim","length"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport toastr from 'toastr';\nimport \"./Encoder.scss\";\nimport Progress from '../';\nimport Cookie from 'js-cookie';\nimport socketIOClient from 'socket.io-client';\n\n\nexport default class Encoder extends Component {\n    state = {\n            file: '',\n            encoded_file: '',\n            convert_ext: '',\n            progress: 0,\n            eta: '',\n        }\n\n\n    componentDidMount = () => {\n        this.socket = socketIOClient('ws://127.0.0.1:/3001');\n\n        this.socket.emit('encode', {\n            file : this.state.file,\n            user : Cookie('_uid'),\n            convert_ext : this.state.convert_ext\n        });\n\n        this.socket.on('progress',(data) => {\n            this.setState({\n                progress : data.percentage,\n                eta : data.eta\n            });\n        });\n\n        this.socket.on('complete',(data) => {\n            this.setState({ encoded_file : data.encoded_file });\n            toastr.success('Encoding complete');\n        });\n    }\n\n    componentWillUnmount = () => {\n        this.socket.disconnect();\n        this.props.newEncode();\n    }\n\n    render(){\n        let filename = this.state.file;\n        return (\n            <div className=\"encoder\">\n                <h3>\n                    {filename.substring(filename.indexOf('_') + 1)} <br/>\n                    <small>\n                        ETA : {this.state.eta.trim().length ? this.state.eta : 'calculating ... ' }\n                    </small>\n                </h3>\n                <Progress title=\"\" progress={this.state.progress}/>\n\n                {this.state.encoded_file ? (\n                    <div>\n                        <a href={ '/encoded/' + Cookie('_uid') + '/' + this.state.encoded_file} download>\n                            <button>Download</button>\n                        </a>\n\n                        <button onClick={this.props.newEncode}>New Upload</button>\n                    </div>\n                ) : <button onClick={this.props.newEncode}>Cancel Encoding</button>}\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}