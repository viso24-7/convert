{"ast":null,"code":"var _jsxFileName = \"C:\\\\JavascriptProjects2\\\\convertfileapp\\\\client\\\\src\\\\uploader\\\\Uploader.js\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport { post } from 'axios';\nimport toastr from 'toastr';\nimport \"./Uploader.scss\";\nimport Progress from \"../Progress\";\nexport default class Uploader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      file: null,\n      uploading: false,\n      progress: 0,\n      upload_ext: null,\n      convert_ext: '',\n      allowed_types: ['webm', 'mkv', 'flv', 'ogg', 'avi', 'mov', 'wmv', 'mp4', 'm4v', 'm4p', 'mpeg', '3gp', '3g2']\n    };\n    this.fileInput = React.createRef();\n    this.selectFile = this.initFileUpload.bind(this);\n    this.uploadFile = this.uploadFile.bind(this);\n    this.cancelUpload = this.cancelUpload.bind(this);\n    this.handleChange = this.setConversionFormat.bind(this);\n  }\n\n  getFileExtension(name) {\n    return /(?:\\.([^.]+))?$/.exec(name)[1];\n  }\n\n  validateFile(ext) {\n    return this.state.allowed_types.includes(ext);\n  }\n\n  onFileChange(e) {\n    if (!e.target.files.length) {\n      return;\n    }\n\n    let file = e.target.files[0],\n        ext = this.getFileExtension(file.name);\n\n    if (this.validateFile(ext)) {\n      this.setState({\n        file: file,\n        upload_ext: ext\n      });\n    } else {\n      toastr.error('Error: Invalid file format');\n    }\n  }\n\n  setConversionFormat(e) {\n    if (!e.target.value.length) {\n      this.setState({\n        convert_ext: ''\n      });\n      return;\n    }\n\n    this.setState({\n      convert_ext: e.target.value\n    });\n  }\n\n  initFileUpload(e) {\n    this.fileInput.current.click();\n  }\n\n  cancelUpload(e) {\n    this.setState({\n      file: null,\n      uploading: false,\n      progress: 0,\n      upload_ext: null,\n      convert_ext: ''\n    });\n    this.fileInput.current.value = '';\n  }\n\n  uploadFile(e) {\n    if (this.state.file && this.state.convert_ext) {\n      this.setState({\n        uploading: true\n      });\n      let data = new FormData();\n      data.append('file', this.state.file);\n      data.append('convert_ext', this.state.convert_ext);\n      post('/upload', data, {\n        onUploadProgress: progressEvent => {\n          let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          this.setState({\n            progress: percentCompleted\n          });\n        }\n      }).then(res => {\n        let file = res.data;\n\n        if (file.uploaded) {\n          this.props.initEncoding(file.path, this.state.convert_ext);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      toastr.error('Error: Select a conversion format');\n    }\n  }\n\n  render() {\n    const {\n      uploading,\n      file,\n      convert_ext,\n      allowed_types,\n      uplo\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"uploader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, !uploading ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, file ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.uploadFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 33\n      }\n    }, \"Upload File\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.selectFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 33\n      }\n    }, \"Select Video File\"), file && /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.cancelUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 38\n      }\n    }, \"Cancel\")), file && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      value: convert_ext,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 37\n      }\n    }, \"Convert To\"), allowed_types.map(ext => {\n      if (ext !== this.state.upload_ext) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          key: ext,\n          value: ext,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 56\n          }\n        }, ext);\n      }\n    }))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      className: \"form-control-file\",\n      ref: this.fileInput,\n      onChange: this.onFileChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(Progress, {\n      title: \"Uploading, please wait\",\n      progress: this.state.progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/JavascriptProjects2/convertfileapp/client/src/uploader/Uploader.js"],"names":["React","Component","post","toastr","Progress","Uploader","constructor","props","state","file","uploading","progress","upload_ext","convert_ext","allowed_types","fileInput","createRef","selectFile","initFileUpload","bind","uploadFile","cancelUpload","handleChange","setConversionFormat","getFileExtension","name","exec","validateFile","ext","includes","onFileChange","e","target","files","length","setState","error","value","current","click","data","FormData","append","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","then","res","uploaded","initEncoding","path","catch","err","console","log","render","uplo","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Component} from 'react';\nimport {post} from 'axios';\nimport toastr from 'toastr';\nimport \"./Uploader.scss\";\nimport Progress from \"../Progress\";\n\nexport default class Uploader extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: null,\n            uploading: false,\n            progress : 0,\n            upload_ext : null,\n            convert_ext : '',\n            allowed_types : [\n                'webm', 'mkv', 'flv', 'ogg',\n                'avi', 'mov' , 'wmv', 'mp4',\n                'm4v', 'm4p', 'mpeg', '3gp',\n                '3g2'\n            ]\n        };\n        this.fileInput = React.createRef();\n        this.selectFile = this.initFileUpload.bind(this);\n        this.uploadFile = this.uploadFile.bind(this);\n        this.cancelUpload = this.cancelUpload.bind(this);\n        this.handleChange = this.setConversionFormat.bind(this);\n    }\n\n    getFileExtension(name){\n        return /(?:\\.([^.]+))?$/.exec(name)[1];\n    }\n\n    validateFile(ext) {\n        return this.state.allowed_types.includes(ext);\n    }\n\n    onFileChange(e) {\n        if(!e.target.files.length){\n            return;\n        }\n\n        let file = e.target.files[0],\n            ext = this.getFileExtension(file.name);\n\n        if (this.validateFile(ext)) {\n            this.setState({\n                file: file,\n                upload_ext : ext\n            })\n        }else{\n            toastr.error('Error: Invalid file format')\n        }\n    }\n\n    setConversionFormat(e){\n        if(!e.target.value.length){\n            this.setState({\n                convert_ext : ''\n            });\n            return;\n        }\n        this.setState({\n            convert_ext : e.target.value\n        });\n    }\n\n    initFileUpload(e){\n        this.fileInput.current.click();\n    }\n\n    cancelUpload(e){\n        this.setState({\n            file: null,\n            uploading: false,\n            progress : 0,\n            upload_ext : null,\n            convert_ext : '',\n        });\n        this.fileInput.current.value = '';\n    }\n\n    uploadFile(e){\n        if(this.state.file && this.state.convert_ext){\n            this.setState({\n                uploading: true,\n            });\n            let data = new FormData();\n            data.append('file', this.state.file);\n            data.append('convert_ext', this.state.convert_ext);\n\n            post('/upload', data, {\n                onUploadProgress: (progressEvent) => {\n                    let percentCompleted = Math.round( (progressEvent.loaded * 100) / progressEvent.total );\n                    this.setState({\n                        progress : percentCompleted\n                    });\n                }\n            })\n            .then(res => {\n                let file = res.data;\n                if(file.uploaded){\n                    this.props.initEncoding(file.path, this.state.convert_ext);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        }else{\n            toastr.error('Error: Select a conversion format')\n        }\n    }\n\n    render(){\n        const {uploading,file,convert_ext,allowed_types,uplo} = this.state;\n        return(\n            <div className=\"uploader\">\n                {!uploading ?\n                    <div>\n                        <div>\n                            {file ?\n                                <button  onClick={this.uploadFile}>Upload File</button>\n                             :\n                                <button onClick={this.selectFile}>Select Video File</button>\n                            }\n                            {file && <button onClick={this.cancelUpload}>Cancel</button>  }\n                        </div>\n\n                        {file &&\n                            <div>\n                                <select value={convert_ext} onChange={this.handleChange}>\n                                    <option value=\"\">Convert To</option>\n                                    {allowed_types.map((ext) => {\n                                            if(ext !== this.state.upload_ext){\n                                                return <option key={ext} value={ext}>{ext}</option>\n                                            }\n                                        })\n                                    }\n                                </select>\n                            </div>\n                        }\n\n                        <input type=\"file\"\n                               name=\"file\"\n                               className=\"form-control-file\"\n                               ref={this.fileInput}\n                               onChange={this.onFileChange.bind(this)}/>\n                    </div>\n                    :\n                        <Progress title=\"Uploading, please wait\" progress={this.state.progress}/>\n                }\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}